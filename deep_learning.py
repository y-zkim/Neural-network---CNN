# -*- coding: utf-8 -*-
"""Deep Learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18Ai_B7DLx7bRMx56mUcgbp7uWgAUeNm1
"""



"""# TP1 OST {DEEP LEARNING}

> Indented block


"""

import tensorflow as tf
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt

"""#**CIFAR10**"""

# CIFAR10
#loading data
(train_images, train_labels), (test_images, test_labels)=datasets.cifar10.load_data()
#image size
M=32 
N=32
channel = 3
nombre_train = train_images.shape[0]
nombre_test = test_images.shape[0]
print(nombre_train)
print(nombre_test)
class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']
plt.figure(figsize=(10,10))
for i in range(25):
  plt.subplot(5, 5, i+1)
  plt.xticks([])
  plt.yticks([])
  plt.grid(False)
  plt.imshow(train_images[i], cmap=plt.cm.binary)
  plt.xlabel(class_names[train_labels[i][0]])
plt.show()
# Val des pixels [0, 255] # data normalized
# train_images, test_images = train_images / 255.0, test_images / 255.0
# redimenssionner ..
trainX = train_images.reshape((nombre_train, M, N, channel))
testX = test_images.reshape((nombre_test, M, N, channel))
# [60000, 32*32] [10000, 32*32]
##### Comment if CNN
# trainX = trainX.reshape((nombre_train, M*N*channel))
# testX = testX.reshape((nombre_test, M*N*channel))

"""#MNIST"""

#loading data
(train_images, train_labels), (test_images, test_labels)=datasets.mnist.load_data()

#image size
M=28 #for CIFAR10 M=32
N=28 #for CIFAR10 N=32

channel = 1 #CRFA  image colour 3 channels, channel=3
nombre_train = train_images.shape[0]
nombre_test = test_images.shape[0]
print(nombre_train)
print(nombre_test)
class_names = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
plt.figure(figsize=(10,10))
for i in range(25):
  plt.subplot(5, 5, i+1)
  plt.xticks([])
  plt.yticks([])
  plt.grid(False)
  plt.imshow(train_images[i], cmap=plt.cm.binary)
  plt.xlabel(class_names[train_labels[i]])
plt.show()

###""
# Val des pixels [0, 255] 
train_images, test_images = train_images / 255.0, test_images / 255.0
# redimenssionner ..
trainX = train_images.reshape((nombre_train, M, N, channel))
testX = test_images.reshape((nombre_test, M, N, channel))
# [60000, 28*28] [10000, 28*28]
trainX = trainX.reshape((nombre_train, M*N*channel))
testX = testX.reshape((nombre_test, M*N*channel))

"""##3.1.2 Définition du modèle de réseau"""

#Architecture
model=models.Sequential()

#Entries layer
model.add(layers.Dense(64, activation='relu', input_dim=M*N*channel))

#Next hidden layer
model.add(layers.Dense(256, activation='relu', input_dim=64))

#Next hidden layer
model.add(layers.Dense(64, activation='relu', input_dim=256))

#Exit layer
model.add(layers.Dense(10, activation='softmax'))

#Network model summary (print)
model.summary()

#Optimisation for network training
opt=tf.keras.optimizers.SGD(learning_rate=0.01, momentum=0.8)
model.compile(optimizer=opt, loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),metrics=['accuracy'])

"""##3.1.3 Apprentissage du réseau

*   Élément de liste
*   Élément de liste

1.   Élément de liste
2.   Élément de liste




"""

print("[INFO] training model...")
history = model.fit(trainX, train_labels, validation_data=(testX, test_labels), batch_size=64, epochs=30)

"""##3.1.4 Evaluation

"""

# Loss
plt.plot(history.history['loss'], label='loss')
plt.plot(history.history['val_loss'], label='val_loss')
plt.xlabel('Epoch')
plt.ylabel('loss')
plt.legend(loc='lower right')
plt.show()

# Precision
plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label='val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend(loc='lower right')
plt.show()

test_loss, test_acc = model.evaluate(testX, test_labels, verbose=2)

"""##5 Implémentation d'une architecture CNN

## CNN de MNIST

## mnist
"""

#loading data
(train_images, train_labels), (test_images, test_labels)=datasets.mnist.load_data()

#image size
M=28 #for CIFAR10 M=32
N=28 #for CIFAR10 N=32

channel = 1 #CRFA  image colour 3 channels, channel=3
nombre_train = train_images.shape[0]
nombre_test = test_images.shape[0]
print(nombre_train)
print(nombre_test)
class_names = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
plt.figure(figsize=(10,10))
for i in range(25):
  plt.subplot(5, 5, i+1)
  plt.xticks([])
  plt.yticks([])
  plt.grid(False)
  plt.imshow(train_images[i], cmap=plt.cm.binary)
  plt.xlabel(class_names[train_labels[i]])
plt.show()

###""
# Pixels values [0, 255]
train_images, test_images = train_images / 255.0, test_images / 255.0
# Reshaping
trainX = train_images.reshape((nombre_train, M, N, channel))
testX = test_images.reshape((nombre_test, M, N, channel))

"""## Cifar"""

#Model definition
model=models.Sequential()
model.add(layers.Conv2D(32,(3,3), activation='tanh', input_shape=(M,N,channel)))
model.add(layers.MaxPooling2D((2,2)))
model.add(layers.Conv2D(32,(3,3), activation='tanh'))
model.add(layers.Flatten())
#model.add(layers.Dense(64, activation='tanh'))
model.add(layers.Dense(64, activation='tanh'))
model.add(layers.Dropout(0.5))
model.add(layers.Dense(10, activation='softmax'))

model.summary()

#Optimisation for network training
opt=tf.keras.optimizers.SGD(learning_rate=0.01, momentum=0.8)
model.compile(optimizer=opt, loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),metrics=['accuracy'])
print("[INFO] training model...")
history = model.fit(trainX, train_labels, validation_data=(testX, test_labels), batch_size=64, epochs=30)

"""##5.4 Evaluation

"""

# Loss
plt.plot(history.history['loss'], label='loss')
plt.plot(history.history['val_loss'], label='val_loss')
plt.xlabel('Epoch')
plt.ylabel('loss')
plt.legend(loc='lower right')
plt.show()

# Precision
plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label='val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend(loc='lower right')
plt.show()

test_loss, test_acc = model.evaluate(testX, test_labels, verbose=2)

from tensorflow.keras.preprocessing import image
import numpy as np
from tensorflow.keras.applications.resnet50 import preprocess_input

path = "/content/test_bird.jpeg"




img = image.load_img(path, target_size=(32,32))

img_array = image.img_to_array(img)
img_batch = np.expand_dims(img_array, axis=0)

img_preprocessed = preprocess_input(img_batch)

prediction = model.predict(img_preprocessed)
print(prediction)

